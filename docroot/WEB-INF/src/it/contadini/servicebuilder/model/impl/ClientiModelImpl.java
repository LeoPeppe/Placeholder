/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.contadini.servicebuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.contadini.servicebuilder.model.Clienti;
import it.contadini.servicebuilder.model.ClientiModel;
import it.contadini.servicebuilder.model.ClientiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Clienti service. Represents a row in the &quot;clienti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.contadini.servicebuilder.model.ClientiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClientiImpl}.
 * </p>
 *
 * @author leo
 * @see ClientiImpl
 * @see it.contadini.servicebuilder.model.Clienti
 * @see it.contadini.servicebuilder.model.ClientiModel
 * @generated
 */
@JSON(strict = true)
public class ClientiModelImpl extends BaseModelImpl<Clienti>
	implements ClientiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clienti model instance should use the {@link it.contadini.servicebuilder.model.Clienti} interface instead.
	 */
	public static final String TABLE_NAME = "clienti";
	public static final Object[][] TABLE_COLUMNS = {
			{ "clientiId", Types.BIGINT },
			{ "nome", Types.VARCHAR },
			{ "cognome", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "indirizzo", Types.VARCHAR },
			{ "cap", Types.VARCHAR },
			{ "telefono", Types.VARCHAR },
			{ "dataCompilazione", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table clienti (clientiId LONG not null primary key,nome VARCHAR(75) null,cognome VARCHAR(75) null,email VARCHAR(75) null,indirizzo VARCHAR(75) null,cap VARCHAR(75) null,telefono VARCHAR(75) null,dataCompilazione VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table clienti";
	public static final String ORDER_BY_JPQL = " ORDER BY clienti.clientiId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY clienti.clientiId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.contadini.servicebuilder.model.Clienti"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.contadini.servicebuilder.model.Clienti"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Clienti toModel(ClientiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Clienti model = new ClientiImpl();

		model.setClientiId(soapModel.getClientiId());
		model.setNome(soapModel.getNome());
		model.setCognome(soapModel.getCognome());
		model.setEmail(soapModel.getEmail());
		model.setIndirizzo(soapModel.getIndirizzo());
		model.setCap(soapModel.getCap());
		model.setTelefono(soapModel.getTelefono());
		model.setDataCompilazione(soapModel.getDataCompilazione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Clienti> toModels(ClientiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Clienti> models = new ArrayList<Clienti>(soapModels.length);

		for (ClientiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.contadini.servicebuilder.model.Clienti"));

	public ClientiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clientiId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClientiId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clientiId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Clienti.class;
	}

	@Override
	public String getModelClassName() {
		return Clienti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("clientiId", getClientiId());
		attributes.put("nome", getNome());
		attributes.put("cognome", getCognome());
		attributes.put("email", getEmail());
		attributes.put("indirizzo", getIndirizzo());
		attributes.put("cap", getCap());
		attributes.put("telefono", getTelefono());
		attributes.put("dataCompilazione", getDataCompilazione());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long clientiId = (Long)attributes.get("clientiId");

		if (clientiId != null) {
			setClientiId(clientiId);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		String cognome = (String)attributes.get("cognome");

		if (cognome != null) {
			setCognome(cognome);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String indirizzo = (String)attributes.get("indirizzo");

		if (indirizzo != null) {
			setIndirizzo(indirizzo);
		}

		String cap = (String)attributes.get("cap");

		if (cap != null) {
			setCap(cap);
		}

		String telefono = (String)attributes.get("telefono");

		if (telefono != null) {
			setTelefono(telefono);
		}

		String dataCompilazione = (String)attributes.get("dataCompilazione");

		if (dataCompilazione != null) {
			setDataCompilazione(dataCompilazione);
		}
	}

	@JSON
	@Override
	public long getClientiId() {
		return _clientiId;
	}

	@Override
	public void setClientiId(long clientiId) {
		_clientiId = clientiId;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public String getCognome() {
		if (_cognome == null) {
			return StringPool.BLANK;
		}
		else {
			return _cognome;
		}
	}

	@Override
	public void setCognome(String cognome) {
		_cognome = cognome;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getIndirizzo() {
		if (_indirizzo == null) {
			return StringPool.BLANK;
		}
		else {
			return _indirizzo;
		}
	}

	@Override
	public void setIndirizzo(String indirizzo) {
		_indirizzo = indirizzo;
	}

	@JSON
	@Override
	public String getCap() {
		if (_cap == null) {
			return StringPool.BLANK;
		}
		else {
			return _cap;
		}
	}

	@Override
	public void setCap(String cap) {
		_cap = cap;
	}

	@JSON
	@Override
	public String getTelefono() {
		if (_telefono == null) {
			return StringPool.BLANK;
		}
		else {
			return _telefono;
		}
	}

	@Override
	public void setTelefono(String telefono) {
		_telefono = telefono;
	}

	@JSON
	@Override
	public String getDataCompilazione() {
		if (_dataCompilazione == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataCompilazione;
		}
	}

	@Override
	public void setDataCompilazione(String dataCompilazione) {
		_dataCompilazione = dataCompilazione;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Clienti.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Clienti toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Clienti)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClientiImpl clientiImpl = new ClientiImpl();

		clientiImpl.setClientiId(getClientiId());
		clientiImpl.setNome(getNome());
		clientiImpl.setCognome(getCognome());
		clientiImpl.setEmail(getEmail());
		clientiImpl.setIndirizzo(getIndirizzo());
		clientiImpl.setCap(getCap());
		clientiImpl.setTelefono(getTelefono());
		clientiImpl.setDataCompilazione(getDataCompilazione());

		clientiImpl.resetOriginalValues();

		return clientiImpl;
	}

	@Override
	public int compareTo(Clienti clienti) {
		int value = 0;

		if (getClientiId() < clienti.getClientiId()) {
			value = -1;
		}
		else if (getClientiId() > clienti.getClientiId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Clienti)) {
			return false;
		}

		Clienti clienti = (Clienti)obj;

		long primaryKey = clienti.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Clienti> toCacheModel() {
		ClientiCacheModel clientiCacheModel = new ClientiCacheModel();

		clientiCacheModel.clientiId = getClientiId();

		clientiCacheModel.nome = getNome();

		String nome = clientiCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			clientiCacheModel.nome = null;
		}

		clientiCacheModel.cognome = getCognome();

		String cognome = clientiCacheModel.cognome;

		if ((cognome != null) && (cognome.length() == 0)) {
			clientiCacheModel.cognome = null;
		}

		clientiCacheModel.email = getEmail();

		String email = clientiCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			clientiCacheModel.email = null;
		}

		clientiCacheModel.indirizzo = getIndirizzo();

		String indirizzo = clientiCacheModel.indirizzo;

		if ((indirizzo != null) && (indirizzo.length() == 0)) {
			clientiCacheModel.indirizzo = null;
		}

		clientiCacheModel.cap = getCap();

		String cap = clientiCacheModel.cap;

		if ((cap != null) && (cap.length() == 0)) {
			clientiCacheModel.cap = null;
		}

		clientiCacheModel.telefono = getTelefono();

		String telefono = clientiCacheModel.telefono;

		if ((telefono != null) && (telefono.length() == 0)) {
			clientiCacheModel.telefono = null;
		}

		clientiCacheModel.dataCompilazione = getDataCompilazione();

		String dataCompilazione = clientiCacheModel.dataCompilazione;

		if ((dataCompilazione != null) && (dataCompilazione.length() == 0)) {
			clientiCacheModel.dataCompilazione = null;
		}

		return clientiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{clientiId=");
		sb.append(getClientiId());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", cognome=");
		sb.append(getCognome());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", indirizzo=");
		sb.append(getIndirizzo());
		sb.append(", cap=");
		sb.append(getCap());
		sb.append(", telefono=");
		sb.append(getTelefono());
		sb.append(", dataCompilazione=");
		sb.append(getDataCompilazione());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("it.contadini.servicebuilder.model.Clienti");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>clientiId</column-name><column-value><![CDATA[");
		sb.append(getClientiId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cognome</column-name><column-value><![CDATA[");
		sb.append(getCognome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indirizzo</column-name><column-value><![CDATA[");
		sb.append(getIndirizzo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cap</column-name><column-value><![CDATA[");
		sb.append(getCap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telefono</column-name><column-value><![CDATA[");
		sb.append(getTelefono());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataCompilazione</column-name><column-value><![CDATA[");
		sb.append(getDataCompilazione());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Clienti.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Clienti.class
		};
	private long _clientiId;
	private String _nome;
	private String _cognome;
	private String _email;
	private String _indirizzo;
	private String _cap;
	private String _telefono;
	private String _dataCompilazione;
	private Clienti _escapedModel;
}